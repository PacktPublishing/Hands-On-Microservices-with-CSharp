<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Extras.Quartz</name>
    </assembly>
    <members>
        <member name="T:Autofac.Extras.Quartz.AutofacJobFactory">
            <summary>
                Resolve Quartz Job and it's dependencies from Autofac container.
            </summary>
            <remarks>
                Factory returns wrapper around read job. It wraps job execution in nested lifetime scope.
            </remarks>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacJobFactory.#ctor(Autofac.ILifetimeScope,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Autofac.Extras.Quartz.AutofacJobFactory" /> class.
            </summary>
            <param name="lifetimeScope">The lifetime scope.</param>
            <param name="scopeTag">The tag to use for new scopes.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="lifetimeScope" /> or <paramref name="scopeTag" /> is
                <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacJobFactory.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle,Quartz.IScheduler)">
            <summary>
                Called by the scheduler at the time of the trigger firing, in order to
                produce a <see cref="T:Quartz.IJob" /> instance on which to call Execute.
            </summary>
            <remarks>
                It should be extremely rare for this method to throw an exception -
                basically only the the case where there is no way at all to instantiate
                and prepare the Job for execution.  When the exception is thrown, the
                Scheduler will move all triggers associated with the Job into the
                <see cref="F:Quartz.TriggerState.Error" /> state, which will require human
                intervention (e.g. an application restart after fixing whatever
                configuration problem led to the issue wih instantiating the Job.
            </remarks>
            <param name="bundle">
                The TriggerFiredBundle from which the <see cref="T:Quartz.IJobDetail" />
                and other info relating to the trigger firing can be obtained.
            </param>
            <param name="scheduler">a handle to the scheduler that is about to execute the job</param>
            <throws>SchedulerException if there is a problem instantiating the Job. </throws>
            <returns>
                the newly instantiated Job
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bundle" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler" /> is <see langword="null" />.</exception>
            <exception cref="T:Quartz.SchedulerConfigException">
                Error resolving exception. Original exception will be stored in
                <see cref="P:System.Exception.InnerException" />.
            </exception>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacJobFactory.ReturnJob(Quartz.IJob)">
            <summary>
                Allows the the job factory to destroy/cleanup the job if needed.
            </summary>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacJobFactory.JobTrackingInfo.#ctor(Autofac.ILifetimeScope)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="T:Autofac.Extras.Quartz.AutofacSchedulerFactory">
            <summary>
                Scheduler factory which uses Autofac to instantiate jobs.
            </summary>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacSchedulerFactory.#ctor(Autofac.Extras.Quartz.AutofacJobFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Quartz.Impl.StdSchedulerFactory" /> class.
            </summary>
            <param name="jobFactory">Job factory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobFactory" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacSchedulerFactory.#ctor(System.Collections.Specialized.NameValueCollection,Autofac.Extras.Quartz.AutofacJobFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Quartz.Impl.StdSchedulerFactory" /> class.
            </summary>
            <param name="props">The properties.</param>
            <param name="jobFactory">Job factory</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobFactory" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Autofac.Extras.Quartz.AutofacSchedulerFactory.Instantiate(Quartz.Core.QuartzSchedulerResources,Quartz.Core.QuartzScheduler)">
            <summary>
                Instantiates the scheduler.
            </summary>
            <param name="rsrcs">The resources.</param>
            <param name="qs">The scheduler.</param>
            <returns>Scheduler.</returns>
        </member>
        <member name="T:Autofac.Extras.Quartz.QuartzAutofacFactoryModule">
            <summary>
                Registers <see cref="T:Quartz.ISchedulerFactory" /> and default <see cref="T:Quartz.IScheduler" />.
            </summary>
        </member>
        <member name="F:Autofac.Extras.Quartz.QuartzAutofacFactoryModule.LifetimeScopeName">
            <summary>
                Default name for nested lifetime scope.
            </summary>
        </member>
        <member name="M:Autofac.Extras.Quartz.QuartzAutofacFactoryModule.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Autofac.Extras.Quartz.QuartzAutofacFactoryModule" /> class with a default lifetime scope
                name.
            </summary>
            <exception cref="T:System.ArgumentNullException">lifetimeScopeName</exception>
        </member>
        <member name="M:Autofac.Extras.Quartz.QuartzAutofacFactoryModule.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Autofac.Extras.Quartz.QuartzAutofacFactoryModule" /> class.
            </summary>
            <param name="lifetimeScopeName">Name of the lifetime scope to wrap job resolution and execution.</param>
            <exception cref="T:System.ArgumentNullException">lifetimeScopeName</exception>
        </member>
        <member name="P:Autofac.Extras.Quartz.QuartzAutofacFactoryModule.ConfigurationProvider">
            <summary>
                Provides custom configuration for Scheduler.
                Returns <see cref="T:System.Collections.Specialized.NameValueCollection" /> with custom Quartz settings.
                <para>See http://quartz-scheduler.org/documentation/quartz-2.x/configuration/ for settings description.</para>
                <seealso cref="T:Quartz.Impl.StdSchedulerFactory" /> for some configuration property names.
            </summary>
        </member>
        <member name="M:Autofac.Extras.Quartz.QuartzAutofacFactoryModule.Load(Autofac.ContainerBuilder)">
            <summary>
                Override to add registrations to the container.
            </summary>
            <remarks>
                Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">
                The builder through which components can be
                registered.
            </param>
        </member>
        <member name="T:Autofac.Extras.Quartz.JobRegistrationFilter">
            <summary>
                Predicate to filter jobs to be registered.
            </summary>
            <param name="jobType">Job type class.</param>
            <returns><c>true</c> if job should be registered, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Autofac.Extras.Quartz.QuartzAutofacJobsModule">
            <summary>
                Registers Quartz jobs from specified assemblies.
            </summary>
        </member>
        <member name="M:Autofac.Extras.Quartz.QuartzAutofacJobsModule.#ctor(System.Reflection.Assembly[])">
            <summary>
                Initializes a new instance of the <see cref="T:Autofac.Extras.Quartz.QuartzAutofacJobsModule" /> class.
            </summary>
            <param name="assembliesToScan">The assemblies to scan for jobs.</param>
            <exception cref="T:System.ArgumentNullException">assembliesToScan</exception>
        </member>
        <member name="P:Autofac.Extras.Quartz.QuartzAutofacJobsModule.AutoWireProperties">
            <summary>
                Instructs Autofac whether registered types should be injected into properties.
            </summary>
            <remarks>
                Default is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Autofac.Extras.Quartz.QuartzAutofacJobsModule.PropertyWiringOptions">
            <summary>
                Property wiring options.
                Used if <see cref="P:Autofac.Extras.Quartz.QuartzAutofacJobsModule.AutoWireProperties" /> is <c>true</c>.
            </summary>
            <remarks>
                See Autofac API documentation http://autofac.org/apidoc/html/33ED0D92.htm for details.
            </remarks>
        </member>
        <member name="P:Autofac.Extras.Quartz.QuartzAutofacJobsModule.JobFilter">
            <summary>
                Job registration filter callback.
            </summary>
            <seealso cref="T:Autofac.Extras.Quartz.JobRegistrationFilter" />
        </member>
        <member name="M:Autofac.Extras.Quartz.QuartzAutofacJobsModule.Load(Autofac.ContainerBuilder)">
            <summary>
                Override to add registrations to the container.
            </summary>
            <remarks>
                Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">
                The builder through which components can be
                registered.
            </param>
        </member>
    </members>
</doc>
