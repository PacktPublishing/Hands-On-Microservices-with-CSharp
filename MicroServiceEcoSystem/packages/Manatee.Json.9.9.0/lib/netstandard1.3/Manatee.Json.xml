<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Manatee.Json</name>
    </assembly>
    <members>
        <member name="T:Manatee.Json.ArrayEquality">
            <summary>
            Defines different kinds of array equality.
            </summary>
        </member>
        <member name="F:Manatee.Json.ArrayEquality.SequenceEqual">
            <summary>
            Defines that all elements in both arrays must match and be in the same sequence.
            </summary>
        </member>
        <member name="F:Manatee.Json.ArrayEquality.ContentsEqual">
            <summary>
            Defines that all elements in both arrays much match, but may appear in any sequence.
            </summary>
        </member>
        <member name="T:Manatee.Json.DuplicateKeyBehavior">
            <summary>
            Defines behavior of <see cref="T:Manatee.Json.JsonObject"/> when adding items at already exist.
            </summary>
        </member>
        <member name="F:Manatee.Json.DuplicateKeyBehavior.Throw">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Manatee.Json.DuplicateKeyBehavior.Overwrite">
            <summary>
            Overwrite the existing item.
            </summary>
        </member>
        <member name="T:Manatee.Json.Internal.Uri3986">
            <summary>
            Defines a URI per RFC-3986.
            </summary>
        </member>
        <member name="M:Manatee.Json.Internal.Uri3986.IsValid(System.String)">
            <summary>
            Determines whether a string represents a valid URI.
            </summary>
            <param name="source">The URI string.</param>
            <returns>true if valid; otherwise false.</returns>
        </member>
        <member name="T:Manatee.Json.JsonArray">
            <summary>
            Represents a collection of JSON values.
            </summary>
            <remarks>
            A value can consist of a string, a numeric value, a boolean (true or false), a null placeholder,
            a JSON array of values, or a nested JSON object.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonArray.EqualityStandard">
            <summary>
            Defines how this <see cref="T:Manatee.Json.JsonArray"/> evaluates equality.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonArray.#ctor">
            <summary>
            Creates an empty instance of a JSON array.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Creates an instance of a JSON array and initializes it with the
            supplied JSON values.
            </summary>
            <param name="collection">A collection of <see cref="T:Manatee.Json.JsonValue"/>s.</param>
        </member>
        <member name="M:Manatee.Json.JsonArray.GetIndentedString(System.Int32)">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <param name="indentLevel">The indention level for the array.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Manatee.Json.JsonArray.Add(Manatee.Json.JsonValue)">
            <summary>
            Adds an object to the end of the <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Manatee.Json.JsonArray"/>. If the value is null, it will be replaced by <see cref="F:Manatee.Json.JsonValue.Null"/>.</param>
        </member>
        <member name="M:Manatee.Json.JsonArray.AddRange(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Manatee.Json.JsonArray"/>. The collection itself cannot be null, but it can contain elements that are null.  These elements will be replaced by <see cref="F:Manatee.Json.JsonValue.Null"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Manatee.Json.JsonArray.ToString">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <returns>A string.</returns>
            <remarks>
            Passing the returned string back into the parser will result in a copy of this Json array.
            </remarks>
        </member>
        <member name="M:Manatee.Json.JsonArray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:Manatee.Json.JsonArray.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Manatee.Json.JsonArrayExtensions">
            <summary>
            Provides extension methods for <see cref="T:Manatee.Json.JsonArray"/>s.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonArrayExtensions.OfType(Manatee.Json.JsonArray,Manatee.Json.JsonValueType)">
            <summary>
            Returns a <see cref="T:Manatee.Json.JsonArray"/> containing only the <see cref="T:Manatee.Json.JsonValue"/>s of a specified type from a given <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="arr">The array to search</param>
            <param name="type">The type of value to return</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing only the <see cref="T:Manatee.Json.JsonValue"/>s of a specified type</returns>
        </member>
        <member name="T:Manatee.Json.JsonObject">
            <summary>
            Represents a collection of key:value pairs in a JSON structure.
            </summary>
            <remarks>
            A key is always represented as a string.  A value can consist of a string, a numerical value, a boolean (true or false), a null placeholder, a JSON array of values, or a nested JSON object.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Manatee.Json.JsonObject.#ctor">
            <summary>
            Creates an empty instance of a JSON object.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonObject.#ctor(System.Collections.Generic.IDictionary{System.String,Manatee.Json.JsonValue})">
            <summary>
            Creates an instance of a JSON object and initializes it with the
            supplied JSON values.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Manatee.Json.JsonObject.GetIndentedString(System.Int32)">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <param name="indentLevel">The indention level for the object.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Manatee.Json.JsonObject.Add(System.String,Manatee.Json.JsonValue)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. If the value is null, it will be replaced by <see cref="F:Manatee.Json.JsonValue.Null"/>.</param>
        </member>
        <member name="M:Manatee.Json.JsonObject.ToString">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <returns>A string.</returns>
            <remarks>
            Passing the returned string back into the parser will result in a copy of this JSON object.
            </remarks>
        </member>
        <member name="M:Manatee.Json.JsonObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Manatee.Json.JsonObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Manatee.Json.JsonObjectExtensions">
            <summary>
            Provides extension methods for <see cref="T:Manatee.Json.JsonValue"/>s.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetString(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> or null if the key is not found or is not a <see cref="T:System.String"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:System.String"/> or null if the key is not found or is not a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetNumber(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a double.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetBoolean(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetArray(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:Manatee.Json.JsonArray"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonArray"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetObject(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:Manatee.Json.JsonObject"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:Manatee.Json.JsonObject"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="T:Manatee.Json.JsonOptions">
            <summary>
            Provides some configurability around the basic JSON entities.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.PrettyPrintIndentChar">
            <summary>
            Determines the indention character to use when calling <see cref="M:Manatee.Json.JsonValue.GetIndentedString(System.Int32)"/>.
            The default is a single tab.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.DuplicateKeyBehavior">
            <summary>
            Defines the how duplicate keys are handled for <see cref="T:Manatee.Json.JsonObject"/>s.
            The default is <see cref="F:Manatee.Json.DuplicateKeyBehavior.Throw"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.DefaultArrayEquality">
            <summary>
            Defines a default value for <see cref="P:Manatee.Json.JsonArray.EqualityStandard"/>.
            The default is <see cref="F:Manatee.Json.ArrayEquality.SequenceEqual"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.ThrowOnIncorrectTypeAccess">
            <summary>
            Defines whether <see cref="T:Manatee.Json.JsonValue"/> should throw an exception when being accessed by the
            wrong accessory type (e.g. accessing an array as a boolean).  The default is true.
            </summary>
        </member>
        <member name="T:Manatee.Json.JsonSyntaxException">
            <summary>
            Thrown when an input string contains a syntax error while parsing a <see cref="T:Manatee.Json.JsonObject"/>, <see cref="T:Manatee.Json.JsonArray"/>, or <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonSyntaxException.Path">
            <summary>
            Gets the path up to the point at which the error was found.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonSyntaxException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:Manatee.Json.JsonValue">
            <summary>
            Represents a JSON value.
            </summary>
            <remarks>
            A value can consist of a string, a numerical value, a boolean (true or false), a null
            placeholder, a JSON array of values, or a nested JSON object.
            </remarks>
        </member>
        <member name="F:Manatee.Json.JsonValue.Null">
            <summary>
            Globally defined null-valued JSON value.
            </summary>
            <remarks>
            When adding values to a <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>, nulls will automatically be converted into this field.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonValue.Boolean">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a boolean.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a boolean.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.String">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a string.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a string.
            </exception>
            <remarks>
            Setting the value as a string will automatically change the <see cref="T:Manatee.Json.JsonValue"/>'s type and discard the old data.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonValue.Number">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a numeric value.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a numeric value.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.Object">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a JSON object.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a Json object.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.Array">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a JSON array.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a Json array.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.Type">
            <summary>
            Gets the value type of the existing data.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor">
            <summary>
            Creates a null <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a boolean.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a string.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(System.Nullable{System.Double})">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a numeric value.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(Manatee.Json.JsonObject)">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a JSON object.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(Manatee.Json.JsonArray)">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a JSON array.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(Manatee.Json.JsonValue)">
            <summary>
            Creates a copy of a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.GetIndentedString(System.Int32)">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <param name="indentLevel">The indention level for the value.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Manatee.Json.JsonValue.ToString">
            <summary>
            Creates a string that represents this <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <returns>A string representation of this <see cref="T:Manatee.Json.JsonValue"/>.</returns>
            <remarks>
            Passing the returned string back into the parser will result in a copy of this <see cref="T:Manatee.Json.JsonValue"/>.
            </remarks>
        </member>
        <member name="M:Manatee.Json.JsonValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Manatee.Json.JsonValue.Equals(Manatee.Json.JsonValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.JsonValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Manatee.Json.JsonValue.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> containing a JSON value.
            </summary>
            <param name="source">the <see cref="T:System.String"/> to parse.</param>
            <returns>The JSON value represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="source"/> is empty or whitespace.</exception>
            <exception cref="T:Manatee.Json.JsonSyntaxException">Thrown if <paramref name="source"/> contains invalid JSON syntax.</exception>
        </member>
        <member name="M:Manatee.Json.JsonValue.Parse(System.IO.TextReader)">
            <summary>
            Parses data from a <see cref="T:System.IO.StreamReader"/> containing a JSON value.
            </summary>
            <param name="stream">the <see cref="T:System.IO.StreamReader"/> to parse.</param>
            <returns>The JSON value represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> is at the end.</exception>
            <exception cref="T:Manatee.Json.JsonSyntaxException">Thrown if <paramref name="stream"/> contains invalid JSON syntax.</exception>
        </member>
        <member name="M:Manatee.Json.JsonValue.ParseAsync(System.IO.TextReader)">
            <summary>
            Parses data from a <see cref="T:System.IO.StreamReader"/> containing a JSON value.
            </summary>
            <param name="stream">the <see cref="T:System.IO.StreamReader"/> to parse.</param>
            <returns>The JSON value represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> is at the end.</exception>
            <exception cref="T:Manatee.Json.JsonSyntaxException">Thrown if <paramref name="stream"/> contains invalid JSON syntax.</exception>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(System.Nullable{System.Boolean})~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:System.Boolean"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="b">A <see cref="T:System.Boolean"/>.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:System.Boolean"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(System.String)~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:System.String"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="s">A <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:System.String"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(System.Nullable{System.Double})~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:System.Double"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="n">A <see cref="T:System.Double"/>.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:System.Double"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(Manatee.Json.JsonObject)~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:Manatee.Json.JsonObject"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="o">A JSON object.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:Manatee.Json.JsonObject"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(Manatee.Json.JsonArray)~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:Manatee.Json.JsonArray"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="a">A JSON array.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:Manatee.Json.JsonArray"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Equality(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
             Performs an equality comparison between two <see cref="T:Manatee.Json.JsonValue"/>s.
            </summary>
            <param name="a">A JsonValue.</param>
            <param name="b">A JsonValue.</param>
            <returns>true if the values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Inequality(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
             Performs an inverted equality comparison between two <see cref="T:Manatee.Json.JsonValue"/>s.
            </summary>
            <param name="a">A JsonValue.</param>
            <param name="b">A JsonValue.</param>
            <returns>false if the values are equal; otherwise, true.</returns>
        </member>
        <member name="T:Manatee.Json.JsonValueIncorrectTypeException">
            <summary>
            Thrown when a value is accessed via the incorrect type accessor.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonValueIncorrectTypeException.ValidType">
            <summary>
            The correct type for the <see cref="T:Manatee.Json.JsonValue"/> that threw the exception.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonValueIncorrectTypeException.RequestedType">
            <summary>
            The type requested.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValueIncorrectTypeException.#ctor(Manatee.Json.JsonValueType,Manatee.Json.JsonValueType)">
            <summary>
            Creates a new instance of this exception.
            </summary>
        </member>
        <member name="T:Manatee.Json.JsonValueType">
            <summary>
            Specifies various types of values for use in a JSON key:value pair.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Number">
            <summary>
            Indicates that the Json key:value pair contains a numeric value (double).
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.String">
            <summary>
            Indicates that the Json key:value pair contains a string.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Boolean">
            <summary>
            Indicates that the Json key:value pair contains a boolean value.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Object">
            <summary>
            Indicates that the Json key:value pair contains a nested Json object.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Array">
            <summary>
            Indicates that the Json key:value pair contains a Json array.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Null">
            <summary>
            Indicates that the Json key:value pair contains a null value.
            </summary>
        </member>
        <member name="T:Manatee.Json.LinqExtensions">
            <summary>
            These extension methods cover LINQ compatibility.
            </summary>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> returned from a LINQ query back into a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonArray"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IDictionary{System.String,Manatee.Json.JsonValue})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2"/> into a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Manatee.Json.JsonValue}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> returned from a LINQ query back into a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a collection of strings to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of strings</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the strings</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Converts a collection of bools to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of booleans</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the booleans</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Nullable{System.Boolean}})">
            <summary>
            Converts a collection of <see cref="T:System.Nullable`1"/> to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of <see cref="T:System.Nullable`1"/></param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{Manatee.Json.JsonArray})">
            <summary>
            Converts a collection of <see cref="T:Manatee.Json.JsonArray"/>s to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of <see cref="T:Manatee.Json.JsonArray"/>s</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the <see cref="T:Manatee.Json.JsonArray"/>s</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{Manatee.Json.JsonObject})">
            <summary>
            Converts a collection of <see cref="T:Manatee.Json.JsonObject"/>s to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of <see cref="T:Manatee.Json.JsonObject"/>s</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the <see cref="T:Manatee.Json.JsonObject"/>s</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Converts a collection of doubles to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of doubles</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the doubles</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Converts a collection of doubles to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of doubles</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the doubles</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson``1(System.Collections.Generic.IEnumerable{``0},Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Serializes a collection of objects which implement <see cref="T:Manatee.Json.Serialization.IJsonSerializable"/> to a <see cref="T:Manatee.Json.JsonArray"/> of equivalent JsonValues.
            </summary>
            <param name="list">A collection of equivalent <see cref="T:Manatee.Json.JsonValue"/>s</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the equivalent JsonValues</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> returned from a LINQ query back into a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.FromJson``1(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue},Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Deserializes a collection of <see cref="T:Manatee.Json.JsonValue"/>s to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the objects.
            </summary>
            <typeparam name="T">The type of object contained in the collection</typeparam>
            <param name="json">The collection of <see cref="T:Manatee.Json.JsonValue"/>s</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>A collection of the deserialized objects</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.FromJson``1(Manatee.Json.JsonObject,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Manatee.Json.JsonValue"/> to its equivalent object.
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> to deserialize</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>A collection of the deserialized objects</returns>
        </member>
        <member name="M:Manatee.Json.Parsing.StringParser._MustInterpretComplex(System.Char)">
            <summary>
            Indicates whether or not the lookahead character is a 
            complex escape code.
            </summary>
            <param name="lookAhead">Lookahead character.</param>
            <returns><c>true</c> if and only if <paramref name="lookAhead"/>
            would require complex interpretation.</returns>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatch">
            <summary>
            Models JSON Patch documents.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatch.Schema">
            <summary>
            Provides a schema that can be used to validate JSON Patch documents before deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Patch.JsonPatch.TryApply(Manatee.Json.JsonValue)">
            <summary>
            Attempts to apply the patch to a JSON instance.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatchAction">
            <summary>
            Defines an action that can be applied within a JSON Patch document.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.From">
            <summary>
            Gets or sets the source for a value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.Value">
            <summary>
            Gets or sets a discrete value to be used.
            </summary>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatchOperation">
            <summary>
            Defines available operations for JSON Patch actions.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Add">
            <summary>
            Indicates an addition operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Remove">
            <summary>
            Indicates a removal operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Replace">
            <summary>
            Indicates a replacement operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Move">
            <summary>
            Indicates a movement operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Copy">
            <summary>
            Indicates a copy operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Test">
            <summary>
            Indicates a test operation.
            </summary>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatchResult">
            <summary>
            Provides the results of a JSON Patch application.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchResult.Patched">
            <summary>
            The resulting document, if the patch was successful.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchResult.Success">
            <summary>
            Gets whether the patch was successful.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchResult.Error">
            <summary>
            Gets any errors that have occurred during a patch.
            </summary>
        </member>
        <member name="T:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext">
            <summary>
            Provides context for the Shunting-yard Algorithm implementation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext.Output">
            <summary>
            Output expression stack.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext.Operators">
            <summary>
            Operator expression stack.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext.LastExpression">
            <summary>
            The last encountered expression.
            </summary>
            <remarks>
            Used to differentiate unary negation from subtraction.
            </remarks>
        </member>
        <member name="M:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext._VisitNegate``1(Manatee.Json.Path.Expressions.ExpressionTreeNode{``0})">
            <summary>
            Constant terms are negated immediately.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext._CheckAndReplaceIfHasPropertyNeeded``1(Manatee.Json.Path.Expressions.Parsing.JsonPathOperator,Manatee.Json.Path.Expressions.ExpressionTreeNode{``0}@,Manatee.Json.Path.Expressions.ExpressionTreeNode{``0}@)">
            <summary>
            Converts <paramref name="left"/> and <paramref name="right"/> to <see cref="T:Manatee.Json.Path.Expressions.HasPropertyExpression`1"/>
            nodes if either are <see cref="T:Manatee.Json.Path.Expressions.NameExpression`1"/> nodes being used in boolean contexts. Otherwise,
            it leaves the nodes as-is.
            </summary>
            <typeparam name="TIn">Type of the resulting JSON expression.</typeparam>
            <param name="op">Operator applied to <paramref name="left"/> and <paramref name="right"/>.</param>
            <param name="left">Left hand side of <paramref name="op"/>.</param>
            <param name="right">Right hand side of <paramref name="op"/>.</param>
        </member>
        <member name="T:Manatee.Json.Path.JsonPath">
            <summary>
            Provides primary functionality for JSON Path objects.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> containing a JSON path.
            </summary>
            <param name="source">the <see cref="T:System.String"/> to parse.</param>
            <returns>The JSON path represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="source"/> is empty or whitespace.</exception>
            <exception cref="T:Manatee.Json.Path.JsonPathSyntaxException">Thrown if <paramref name="source"/> contains invalid JSON path syntax.</exception>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Evaluate(Manatee.Json.JsonValue)">
            <summary>
            Evaluates a JSON value using the path.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> to evaulate.</param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Equals(Manatee.Json.Path.JsonPath)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathArray">
            <summary>
            Serves as a stand-in for JsonArray in Path Expressions.
            </summary>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathRoot">
            <summary>
            Provides extension methods which can be used within array and search JSON Path queries.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.Length">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.HasProperty(System.String)">
            <summary>
            Determines if an object contains a property or, if its value is a boolean, whether the value is true.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>true if the value is an object and contains key <paramref name="name"/> or if its value is true; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.Name(System.String)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.ArrayIndex(System.Int32)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="index">The index to retreive.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathSyntaxException">
            <summary>
            Thrown when an input string contains a syntax error while parsing a <see cref="T:Manatee.Json.Path.JsonPath"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.JsonPathSyntaxException.Path">
            <summary>
            Gets the path up to the point at which the error was found.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.JsonPathSyntaxException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathValue">
            <summary>
            Serves as a stand-in for JsonValue in Path Expressions.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,System.Boolean)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(System.Boolean,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,System.Boolean)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(System.Boolean,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LogicalNot(Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Subtraction(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Subtraction(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Subtraction(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Multiply(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Multiply(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Multiply(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Division(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Division(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Division(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Modulus(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Modulus(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Modulus(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathWith">
            <summary>
            Provides methods to be used when working with JSON Paths.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Length">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by specifying an array length.
            </summary>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Name(System.String)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by specifying an object property.
            </summary>
            <param name="name">The name to follow.</param>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.Length"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Search(System.String)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by searching for an object property.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.SearchLength"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchLength">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by searching for array lengths.
            </summary>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="slices">The indices and slices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="slices">The indices and slices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Length(Manatee.Json.Path.JsonPath)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an array length.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Name(Manatee.Json.Path.JsonPath,System.String)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an object property.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="name">The name to follow.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.Length(Manatee.Json.Path.JsonPath)"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Search(Manatee.Json.Path.JsonPath,System.String)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by searching for an object property.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="name">The name to follow.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.SearchLength(Manatee.Json.Path.JsonPath)"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchLength(Manatee.Json.Path.JsonPath)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by searching for array lengths.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.JsonPath,Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="slices">The indices and slices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by including all array values.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath,Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="slices">The indices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="T:Manatee.Json.Path.PathExpressionExtensions">
            <summary>
            Provides extension methods which can be used within array and search JSON Path queries.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Length(Manatee.Json.Path.JsonPathArray)">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="json">The array.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Name(Manatee.Json.Path.JsonPathArray,System.String)">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="json">The array.</param>
            <param name="name">The name of the property.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Length(Manatee.Json.Path.JsonPathValue)">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="json">The array.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.HasProperty(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            Determines if an object contains a property or, if its value is a boolean, whether the value is true.
            </summary>
            <param name="json">The value.</param>
            <param name="name">The name of the property.</param>
            <returns>true if the value is an object and contains key <paramref name="name"/> or if its value is true; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Name(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="json">The value.</param>
            <param name="name">The name of the property.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.ArrayIndex(Manatee.Json.Path.JsonPathValue,System.Int32)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="json">The value.</param>
            <param name="index">The index to retreive.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.IndexOf(Manatee.Json.Path.JsonPathValue,Manatee.Json.JsonValue)">
            <summary>
            Gets the index of a value within an array.
            </summary>
            <param name="json">The value.</param>
            <param name="value">The query.</param>
            <returns>The index of the requested value or -1 if the value does not exist.</returns>
        </member>
        <member name="T:Manatee.Json.Path.Slice">
            <summary>
            Defines an index in a JSON Path array.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.Slice.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Path.Slice"/> class.
            </summary>
            <param name="index">A single index.</param>
        </member>
        <member name="M:Manatee.Json.Path.Slice.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Path.Slice"/> class.
            </summary>
            <param name="start">The start index of the slice.</param>
            <param name="end">The end index of the slice.</param>
            <param name="step">Optional. The increment between each selected index between <paramref name="start"/> and <paramref name="end"/>.</param>
        </member>
        <member name="M:Manatee.Json.Path.Slice.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.Slice.Equals(Manatee.Json.Path.Slice)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Path.Slice.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.Slice.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.Slice.op_Implicit(System.Int32)~Manatee.Json.Path.Slice">
            <summary>
            Implicit conversion from integer to a single-indexed <see cref="T:Manatee.Json.Path.Slice"/>.
            </summary>
            <param name="i">The index.</param>
        </member>
        <member name="T:Manatee.Json.Pointer.JsonPointer">
            <summary>
            Represents a JSON Pointer.
            </summary>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.#ctor">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Pointer.JsonPointer"/> instance.
            </summary>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Pointer.JsonPointer"/> instance.
            </summary>
            <param name="source">A collection of strings representing the segments of the pointer.</param>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.Parse(System.String)">
            <summary>
            Parses a string containing a JSON Pointer.
            </summary>
            <param name="source">The source string.</param>
            <returns>A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> instance.</returns>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.Evaluate(Manatee.Json.JsonValue)">
            <summary>
            Evaluates the pointer against a JSON instance.
            </summary>
            <param name="root">The JSON instance.</param>
            <returns>The element the pointer references, if any.</returns>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Manatee.Json.Pointer.PointerEvaluationResults">
            <summary>
            Provides results for a JSON Pointer evaluation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Pointer.PointerEvaluationResults.Result">
            <summary>
            Gets the referenced value, if found.
            </summary>
        </member>
        <member name="P:Manatee.Json.Pointer.PointerEvaluationResults.Error">
            <summary>
            Gets any errors that may have resulted in not finding the referenced value.
            </summary>
        </member>
        <member name="T:Manatee.Json.ReadOnlyException">
            <summary>
            Thrown when a read-only property is accessed.
            </summary>
        </member>
        <member name="M:Manatee.Json.ReadOnlyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.ReadOnlyException"/> class.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.AdditionalItems">
            <summary>
            Defines additional items for array-type schemas.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.AdditionalItems.True">
            <summary>
            Allows any additional items to be added to the JSON.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.AdditionalItems.False">
            <summary>
            Prohibits additional items in the JSON.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalItems.Definition">
            <summary>
            Defines a schema to which any additional properties must validate.
            </summary>
            <exception cref="T:Manatee.Json.ReadOnlyException">Thrown when attempting to set the definition of one of the static <see cref="T:Manatee.Json.Schema.AdditionalProperties"/> fields.</exception>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItems.Equals(Manatee.Json.Schema.AdditionalItems)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItems.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItems.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItems.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItems.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItems.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.AdditionalProperties">
            <summary>
            Defines additional properties for object-specific schemas.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.AdditionalProperties.True">
            <summary>
            Allows any additional property to be added to the JSON.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.AdditionalProperties.False">
            <summary>
            Prohibits additional properties in the JSON.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalProperties.Definition">
            <summary>
            Defines a schema to which any additional properties must validate.
            </summary>
            <exception cref="T:Manatee.Json.ReadOnlyException">Thrown when attempting to set the definition of one of the static <see cref="T:Manatee.Json.Schema.AdditionalProperties"/> fields.</exception>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.Equals(Manatee.Json.Schema.AdditionalProperties)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.op_Implicit(Manatee.Json.Schema.JsonSchema04)~Manatee.Json.Schema.AdditionalProperties">
            <summary>
            Implicitly converts a <see cref="T:Manatee.Json.Schema.JsonSchema04"/> instance to an <see cref="T:Manatee.Json.Schema.AdditionalProperties"/> instance.
            Supports defining schema in code.
            </summary>
            <param name="schema">The schema to convert.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.op_Implicit(Manatee.Json.Schema.JsonSchema06)~Manatee.Json.Schema.AdditionalProperties">
            <summary>
            Implicitly converts a <see cref="T:Manatee.Json.Schema.JsonSchema06"/> instance to an <see cref="T:Manatee.Json.Schema.AdditionalProperties"/> instance.
            Supports defining schema in code.
            </summary>
            <param name="schema">The schema to convert.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalProperties.op_Implicit(Manatee.Json.Schema.JsonSchemaReference)~Manatee.Json.Schema.AdditionalProperties">
            <summary>
            Implicitly converts a <see cref="T:Manatee.Json.Schema.JsonSchema07"/> instance to an <see cref="T:Manatee.Json.Schema.AdditionalProperties"/> instance.
            Supports defining schema in code.
            </summary>
            <param name="schema">The schema to convert.</param>
        </member>
        <member name="T:Manatee.Json.Schema.ContentEncoding">
            <summary>
            Defines possible values for the draft-07 JSON Schema property <see cref="P:Manatee.Json.Schema.JsonSchema07.ContentEncoding"/>.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.ContentEncoding.SevenBit">
            <summary>
            Indicates a 7-bit encoding.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.ContentEncoding.EightBit">
            <summary>
            Indicates a 8-bit encoding.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.ContentEncoding.Binary">
            <summary>
            Indicates a binary encoding.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.ContentEncoding.QuotedPrintable">
            <summary>
            Indicates a quoted-printable encoding.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.ContentEncoding.Base64">
            <summary>
            Indicates a base-64 encoding.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.ContentEncoding.IetfToken">
            <summary>
            Indicates an ietf-token encoding.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.ContentEncoding.XToken">
            <summary>
            Indicates an x-token encoding.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.EnumSchemaValue">
            <summary>
            Defines a single schema enumeration value.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.EnumSchemaValue.#ctor(Manatee.Json.JsonValue)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.EnumSchemaValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumSchemaValue.Validate(Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.EnumSchemaValue.Equals(Manatee.Json.Schema.EnumSchemaValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumSchemaValue.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumSchemaValue.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.EnumSchemaValue.op_Implicit(System.String)~Manatee.Json.Schema.EnumSchemaValue">
            <summary>
            Implicitly converts a <see cref="T:System.String"/> to a <see cref="T:Manatee.Json.Schema.EnumSchemaValue"/>.
            </summary>
            <param name="value">A string.</param>
            <returns>An <see cref="T:Manatee.Json.Schema.EnumSchemaValue"/> that represents the string value.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.IJsonSchema">
            <summary>
            Defines a type for all schema to implement.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchema.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchema.DocumentPath">
            <summary>
            Identifies the physical path for the schema document (may be different than the ID).
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchema.Id">
            <summary>
            Used to specify which this schema defines.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchema.Schema">
            <summary>
            Used to specify a schema which contains the definitions used by this schema.
            </summary>
            <remarks>
            if left null, the default of http://json-schema.org/draft-04/schema# is used.
            </remarks>
        </member>
        <member name="T:Manatee.Json.Schema.IJsonSchemaDependency">
            <summary>
            Defines properties and methods required to represent dependencies within JSON Schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchemaDependency.PropertyName">
            <summary>
            Gets or sets the property with the dependency.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaDependency.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaDependency.GetJsonData">
            <summary>
            Gets the JSON data to be used as the value portion in the dependency list of the schema.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.IJsonSchemaPropertyValidator">
            <summary>
            Performs validations for a single schema property.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaPropertyValidator.Applies(Manatee.Json.Schema.IJsonSchema,Manatee.Json.JsonValue)">
            <summary>
            Determines whether the validator should execute for a particular schema and JSON instance.
            </summary>
            <param name="schema">The schema.</param>
            <param name="json">The JSON instance.</param>
            <returns>true if the validatory should execute; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaPropertyValidator.Validate(Manatee.Json.Schema.IJsonSchema,Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Performs validations of a schema property on a JSON instance.
            </summary>
            <param name="schema">The schema.</param>
            <param name="json">The JSON instance.</param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used resolving references. Pass this to any subschema validations that need to be performed.</param>
            <returns>A <see cref="T:Manatee.Json.Schema.SchemaValidationResults"/> instance.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchema04">
            <summary>
            Provides base functionality for the basic <see cref="T:Manatee.Json.Schema.IJsonSchema"/> implementations.S
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema04.Root">
            <summary>
            Defines the root reference schema for <see cref="T:Manatee.Json.Schema.JsonSchema04"/>.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema04.Empty">
            <summary>
            Defines an empty Schema.  Useful for specifying that any schema is valid.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema04.MetaSchema">
            <summary>
            Defines the Draft-04 Schema as presented at http://json-schema.org/draft-04/schema#
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Id">
            <summary>
            Used to specify which this schema defines.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Schema">
            <summary>
            Used to specify a schema which contains the definitions used by this schema.
            </summary>
            <remarks>
            if left null, the default of http://json-schema.org/draft-04/schema# is used.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Title">
            <summary>
            Defines a title for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Description">
            <summary>
            Defines a description for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Default">
            <summary>
            The default value for this schema.
            </summary>
            <remarks>
            The default value is defined as a JSON value which may need to be deserialized to a .Net data structure.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.MultipleOf">
            <summary>
            Defines a divisor for acceptable values.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Maximum">
            <summary>
            Defines a maximum acceptable value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.ExclusiveMaximum">
            <summary>
            Defines whether the maximum value is itself acceptable.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Minimum">
            <summary>
            Defines a minimum acceptable value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.ExclusiveMinimum">
            <summary>
            Defines whether the minimum value is itself acceptable.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.MaxLength">
            <summary>
            Defines a maximum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.MinLength">
            <summary>
            Defines a minimum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Pattern">
            <summary>
            Defines a <see cref="T:System.Text.RegularExpressions.Regex"/> pattern for to which the value must adhere.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.AdditionalItems">
            <summary>
            Defines any additional items to be expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Items">
            <summary>
            Defines the schema for the items contained in the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.MaxItems">
            <summary>
            Defines a maximum number of items required for the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.MinItems">
            <summary>
            Gets and sets a minimum number of items required for the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.UniqueItems">
            <summary>
            Defines whether the array should contain only unique items.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.MaxProperties">
            <summary>
            Defines a maximum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.MinProperties">
            <summary>
            Defines a minimum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.AdditionalProperties">
            <summary>
            Defines any additional properties to be expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Definitions">
            <summary>
            Defines a collection of schema type definitions.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Properties">
            <summary>
            Defines a collection of properties expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.PatternProperties">
            <summary>
            Defines additional properties based on regular expression matching of the property name.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Dependencies">
            <summary>
            Defines property dependencies.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Enum">
            <summary>
            A collection of acceptable values.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Type">
            <summary>
            The JSON Schema type which defines this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.AllOf">
            <summary>
            A collection of required schema which must be satisfied.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.AnyOf">
            <summary>
            A collection of schema options.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.OneOf">
            <summary>
            A collection of schema options.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Not">
            <summary>
            A collection of schema which must not be satisfied.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Required">
            <summary>
            A collection of property names that are required.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.Format">
            <summary>
            Defines a required format for the string.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.ExtraneousDetails">
            <summary>
            Gets other, non-schema-defined properties.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema04.DocumentPath">
            <summary>
            Identifies the physical path for the schema document (may be different than the ID).
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema04.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>True if the <see cref="T:Manatee.Json.JsonValue"/> passes validation; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema04.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema04.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema04.Equals(Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema04.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema04.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchema06">
            <summary>
            Provides base functionality for the basic <see cref="T:Manatee.Json.Schema.IJsonSchema"/> implementations.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema06.Root">
            <summary>
            Defines the root reference schema for <see cref="T:Manatee.Json.Schema.JsonSchema04"/>.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema06.Empty">
            <summary>
            Defines an empty Schema.  Useful for specifying that any schema is valid.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema06.True">
            <summary>
            Defines a "true" boolean schema.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema06.False">
            <summary>
            Defines a "false" boolean schema.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema06.MetaSchema">
            <summary>
            Defines the Draft-06 Schema as presented at http://json-schema.org/draft-06/schema#
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Id">
            <summary>
            Used to specify which this schema defines.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Schema">
            <summary>
            Used to specify a schema which contains the definitions used by this schema.
            </summary>
            <remarks>
            if left null, the default of http://json-schema.org/draft-04/schema# is used.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Title">
            <summary>
            Defines a title for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Description">
            <summary>
            Defines a description for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Default">
            <summary>
            The default value for this schema.
            </summary>
            <remarks>
            The default value is defined as a JSON value which may need to be deserialized to a .Net data structure.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Examples">
            <summary>
            Examples of JSON that conform to this schemata.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.MultipleOf">
            <summary>
            Defines a divisor for acceptable values.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Maximum">
            <summary>
            Defines a maximum acceptable value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.ExclusiveMaximum">
            <summary>
            Defines whether the maximum value is itself acceptable.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Minimum">
            <summary>
            Defines a minimum acceptable value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.ExclusiveMinimum">
            <summary>
            Defines whether the minimum value is itself acceptable.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.MaxLength">
            <summary>
            Defines a maximum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.MinLength">
            <summary>
            Defines a minimum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Pattern">
            <summary>
            Defines a <see cref="T:System.Text.RegularExpressions.Regex"/> pattern for to which the value must adhere.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.AdditionalItems">
            <summary>
            Defines any additional items to be expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Items">
            <summary>
            Defines the schema for the items contained in the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.MaxItems">
            <summary>
            Defines a maximum number of items required for the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.MinItems">
            <summary>
            Gets and sets a minimum number of items required for the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.UniqueItems">
            <summary>
            Defines whether the array should contain only unique items.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Contains">
            <summary>
            Defines a schema that must be contained within an array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.MaxProperties">
            <summary>
            Defines a maximum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.MinProperties">
            <summary>
            Defines a minimum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.AdditionalProperties">
            <summary>
            Defines any additional properties to be expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Definitions">
            <summary>
            Defines a collection of schema type definitions.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Properties">
            <summary>
            Defines a collection of properties expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.PatternProperties">
            <summary>
            Defines additional properties based on regular expression matching of the property name.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Dependencies">
            <summary>
            Defines property dependencies.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.PropertyNames">
            <summary>
            Defines conditions for valid property names.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Const">
            <summary>
            Defines an expected constant value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Enum">
            <summary>
            A collection of acceptable values.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Type">
            <summary>
            The JSON Schema type which defines this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.AllOf">
            <summary>
            A collection of required schema which must be satisfied.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.AnyOf">
            <summary>
            A collection of schema options.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.OneOf">
            <summary>
            A collection of schema options.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Not">
            <summary>
            A collection of schema which must not be satisfied.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Required">
            <summary>
            A collection of property names that are required.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.Format">
            <summary>
            Defines a required format for the string.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.ExtraneousDetails">
            <summary>
            Gets other, non-schema-defined properties.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema06.DocumentPath">
            <summary>
            Identifies the physical path for the schema document (may be different than the ID).
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema06.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>True if the <see cref="T:Manatee.Json.JsonValue"/> passes validation; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema06.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema06.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema06.Equals(Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema06.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema06.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema06.op_Implicit(System.Boolean)~Manatee.Json.Schema.JsonSchema06">
            <summary>
            Implicitly converts boolean values to draft-06 <see cref="F:Manatee.Json.Schema.JsonSchema06.True"/> and <see cref="F:Manatee.Json.Schema.JsonSchema06.False"/> schema values.
            </summary>
            <param name="value">The value</param>
            <returns>A <see cref="T:Manatee.Json.Schema.JsonSchema06"/> value that represents the boolean.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchema07">
            <summary>
            Provides base functionality for the basic <see cref="T:Manatee.Json.Schema.IJsonSchema"/> implementations.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema07.Root">
            <summary>
            Defines the root reference schema for <see cref="T:Manatee.Json.Schema.JsonSchema04"/>.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema07.Empty">
            <summary>
            Defines an empty Schema.  Useful for specifying that any schema is valid.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema07.True">
            <summary>
            Defines a "true" boolean schema.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema07.False">
            <summary>
            Defines a "false" boolean schema.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema07.MetaSchema">
            <summary>
            Defines the Draft-07 Schema as presented at http://json-schema.org/draft-07/schema#
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Id">
            <summary>
            Used to specify which this schema defines.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Schema">
            <summary>
            Used to specify a schema which contains the definitions used by this schema.
            </summary>
            <remarks>
            if left null, the default of http://json-schema.org/draft-04/schema# is used.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Comment">
            <summary>
            Defines a comment for this schema;
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Title">
            <summary>
            Defines a title for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Description">
            <summary>
            Defines a description for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Default">
            <summary>
            The default value for this schema.
            </summary>
            <remarks>
            The default value is defined as a JSON value which may need to be deserialized to a .Net data structure.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.ReadOnly">
            <summary>
            Defines whether this schema is intended to be read-only.
            </summary>
            <remarks>
            A true value in this property only has an effect when <see cref="P:Manatee.Json.Schema.JsonSchemaOptions.EnforceReadOnly"/> is also true.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Examples">
            <summary>
            Examples of JSON that conform to this schemata.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.MultipleOf">
            <summary>
            Defines a divisor for acceptable values.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Maximum">
            <summary>
            Defines a maximum acceptable value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.ExclusiveMaximum">
            <summary>
            Defines whether the maximum value is itself acceptable.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Minimum">
            <summary>
            Defines a minimum acceptable value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.ExclusiveMinimum">
            <summary>
            Defines whether the minimum value is itself acceptable.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.MaxLength">
            <summary>
            Defines a maximum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.MinLength">
            <summary>
            Defines a minimum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Pattern">
            <summary>
            Defines a <see cref="T:System.Text.RegularExpressions.Regex"/> pattern for to which the value must adhere.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.AdditionalItems">
            <summary>
            Defines any additional items to be expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Items">
            <summary>
            Defines the schema for the items contained in the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.MaxItems">
            <summary>
            Defines a maximum number of items required for the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.MinItems">
            <summary>
            Gets and sets a minimum number of items required for the array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.UniqueItems">
            <summary>
            Defines whether the array should contain only unique items.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Contains">
            <summary>
            Defines a schema that must be contained within an array.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.MaxProperties">
            <summary>
            Defines a maximum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.MinProperties">
            <summary>
            Defines a minimum acceptable length.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.AdditionalProperties">
            <summary>
            Defines any additional properties to be expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Definitions">
            <summary>
            Defines a collection of schema type definitions.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Properties">
            <summary>
            Defines a collection of properties expected by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.PatternProperties">
            <summary>
            Defines additional properties based on regular expression matching of the property name.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Dependencies">
            <summary>
            Defines property dependencies.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.PropertyNames">
            <summary>
            Defines conditions for valid property names.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Const">
            <summary>
            Defines an expected constant value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Enum">
            <summary>
            A collection of acceptable values.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Type">
            <summary>
            The JSON Schema type which defines this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Format">
            <summary>
            Defines a required format for the string.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.ContentMediaType">
            <summary>
            Defines a content media type for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.ContentEncoding">
            <summary>
            Defines a content encoding for this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.If">
            <summary>
            Defines a schema which, if validated, the JSON is validated against the <see cref="P:Manatee.Json.Schema.JsonSchema07.Then"/> schema, otherwise it is validated against the <see cref="P:Manatee.Json.Schema.JsonSchema07.Else"/> schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Then">
            <summary>
            Defines a schema to use when the <see cref="P:Manatee.Json.Schema.JsonSchema07.If"/> schema validates successfully.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Else">
            <summary>
            Defines a schema to use when the <see cref="P:Manatee.Json.Schema.JsonSchema07.If"/> schema validates unsuccessfully.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.AllOf">
            <summary>
            A collection of required schema which must be satisfied.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.AnyOf">
            <summary>
            A collection of schema options.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.OneOf">
            <summary>
            A collection of schema options.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Not">
            <summary>
            A collection of schema which must not be satisfied.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.Required">
            <summary>
            A collection of property names that are required.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.ExtraneousDetails">
            <summary>
            Gets other, non-schema-defined properties.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema07.DocumentPath">
            <summary>
            Identifies the physical path for the schema document (may be different than the ID).
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema07.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>True if the <see cref="T:Manatee.Json.JsonValue"/> passes validation; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema07.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema07.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema07.Equals(Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema07.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema07.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema07.op_Implicit(System.Boolean)~Manatee.Json.Schema.JsonSchema07">
            <summary>
            Implicitly converts boolean values to draft-06 <see cref="F:Manatee.Json.Schema.JsonSchema07.True"/> and <see cref="F:Manatee.Json.Schema.JsonSchema07.False"/> schema values.
            </summary>
            <param name="value">The value</param>
            <returns>A <see cref="T:Manatee.Json.Schema.JsonSchema07"/> value that represents the boolean.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaCollection">
            <summary>
            Represents a collection of schemata.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaCollection.DocumentPath">
            <summary>
            Identifies the physical path for the schema document (may be different than the ID).
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaCollection.Id">
            <summary>
            Used to specify which this schema defines.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaCollection.Schema">
            <summary>
            Used to specify a schema which contains the definitions used by this schema.
            </summary>
            <remarks>
            if left null, the default of http://json-schema.org/draft-04/schema# is used.
            </remarks>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaCollection.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaCollection.Equals(Manatee.Json.Schema.IJsonSchema)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaCollection.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaCollection.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaFactory">
            <summary>
            Defines methods to build schema objects.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaFactory.SetDefaultSchemaVersion``1">
            <summary>
            Sets the default schema to use when deserializing a schema that doesn't define its version.
            </summary>
            <typeparam name="T">The schema type.</typeparam>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaFactory.RegisterExtendedSchema``1(System.String,System.Func{``0},``0)">
            <summary>
            Registers a schema with an extended vocabulary so that it can be deserialized properly.
            </summary>
            <typeparam name="T">The schema type.</typeparam>
            <param name="id">The schema's ID.</param>
            <param name="factory">A factory function for creating instances.</param>
            <param name="metaSchema">Optional - A meta-schema instance for this schema.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaFactory.FromJson(Manatee.Json.JsonValue,System.Uri)">
            <summary>
            Creates a schema object from its JSON representation.
            </summary>
            <param name="json">A JSON object.</param>
            <param name="documentPath">The path to the physical location to this document</param>
            <returns>A schema object</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaFactory.FromJson``1(Manatee.Json.JsonValue,System.Uri)">
            <summary>
            Creates a schema object from its JSON representation, allowing a specific schema version to be used..
            </summary>
            <param name="json">A JSON object.</param>
            <param name="documentPath">The path to the physical location to this document</param>
            <typeparam name="T">The type representing the schema version to create.</typeparam>
            <returns>A schema object</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaFactory.FromJson(Manatee.Json.JsonValue,System.Type,System.Uri)">
            <summary>
            Creates a schema object from its JSON representation, allowing a specific schema version to be used..
            </summary>
            <param name="json">A JSON object.</param>
            <param name="type">The type representing the schema version to create.</param>
            <param name="documentPath">The path to the physical location to this document</param>
            <returns>A schema object</returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaOptions">
            <summary>
            Defines options associated with JSON Schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaOptions.Download">
            <summary>
            Gets and sets a method used to download online schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaOptions.ValidateFormat">
            <summary>
            Gets or sets whether the "format" schema keyword should be validated.  The default is true.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaOptions.EnforceReadOnly">
            <summary>
            Gets or sets whether the "readOnly" schema keyword should be enforced.  The default is true.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaOptions.#cctor">
            <summary>
            Initializes all properties.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaPropertyValidatorFactory">
            <summary>
            Provides the validation system with validators.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaPropertyValidatorFactory.RegisterValidator(Manatee.Json.Schema.IJsonSchemaPropertyValidator)">
            <summary>
            Registers a new validator to be executed during schema validation.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaReference">
            <summary>
            Defines a reference to a schema.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaReference._generalEscapePattern">
            <summary>
            Defines a reference to the root schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaReference.Reference">
            <summary>
            Defines the reference in respect to the root schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaReference.Resolved">
            <summary>
            Exposes the schema at the references location.
            </summary>
            <remarks>
            The <see cref="M:Manatee.Json.Schema.JsonSchemaReference._Resolve(Manatee.Json.JsonValue)"/> method must first be called.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaReference.Base">
            <summary>
            Provides a mechanism to include sibling keywords alongside $ref.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaReference.Id">
            <summary>
            Used to specify which this schema defines.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaReference.Schema">
            <summary>
            Used to specify a schema which contains the definitions used by this schema.
            </summary>
            <remarks>
            if left null, the default of http://json-schema.org/draft-04/schema# is used.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaReference.DocumentPath">
            <summary>
            Identifies the physical path for the schema document (may be different than the ID).
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.#ctor(System.String,Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.JsonSchemaReference"/> class that supports additional schema properties.
            </summary>
            <param name="reference">The relative (internal) or absolute (URI) path to the referenced type definition.</param>
            <param name="baseSchema">An instance of the base schema to use (either <see cref="T:Manatee.Json.Schema.JsonSchema04"/> or <see cref="T:Manatee.Json.Schema.JsonSchema06"/>).</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="reference"/> or <paramref name="baseSchema"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="reference"/> is empty or whitespace or if <paramref name="baseSchema"/> is not of type <see cref="T:Manatee.Json.Schema.JsonSchema04"/> or <see cref="T:Manatee.Json.Schema.JsonSchema06"/>.</exception>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.JsonSchemaReference"/> class.
            </summary>
            <param name="reference">The relative (internal) or absolute (URI) path to the referenced type definition.</param>
            <param name="baseSchemaType">The draft version of schema to use as a base when resolving if not defined in the resolved schema.
            Must be either <see cref="T:Manatee.Json.Schema.JsonSchema04"/> or <see cref="T:Manatee.Json.Schema.JsonSchema06"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="reference"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="reference"/> is empty or whitespace or when <paramref name="baseSchemaType"/> is not <see cref="T:Manatee.Json.Schema.JsonSchema04"/> or <see cref="T:Manatee.Json.Schema.JsonSchema06"/>.</exception>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>True if the <see cref="T:Manatee.Json.JsonValue"/> passes validation; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.Equals(Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaReference.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaRegistry">
            <summary>
            Provides a registry in which JSON schema can be saved to be referenced by the system.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.#cctor">
            <summary>
            Initializes the <see cref="T:Manatee.Json.Schema.JsonSchemaRegistry"/> class.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Get(System.String)">
            <summary>
            Downloads and registers a schema at the specified URI.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Register(Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Explicitly registers an existing schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Unregister(Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Removes a schema from the registry.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Unregister(System.String)">
            <summary>
            Removes a schema from the registry.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Clear">
            <summary>
            Clears the registry of all types.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaType">
            <summary>
            Defines the recognized schema data types.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.NotDefined">
            <summary>
            Provides a default value so that type cannot be assumed.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Array">
            <summary>
            Indicates the array type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Indicates the boolean type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Indicates the integer type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Null">
            <summary>
            Indicates the null type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Number">
            <summary>
            Indicates the number type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Object">
            <summary>
            Indicates the object type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.String">
            <summary>
            Indicates the string type.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.PropertyDependency">
            <summary>
            Declares a dependency that is based on the presence of other properties in the JSON.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertyDependency.PropertyName">
            <summary>
            Gets or sets the property with the dependency.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.PropertyDependency"/> class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="dependencies">A collection of properties on which <paramref name="propertyName"/> is dependent.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.#ctor(System.String,System.String,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.PropertyDependency"/> class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="firstDependency">A minimal required property dependency.</param>
            <param name="otherDependencies">Additional property dependencies.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.GetJsonData">
            <summary>
            Gets the JSON data to be used as the value portion in the dependency list of the schema.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaDependency">
            <summary>
            Creates a dependency that is based on a secondary schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaDependency.PropertyName">
            <summary>
            Gets or sets the property with the dependency.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.#ctor(System.String,Manatee.Json.Schema.IJsonSchema)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.SchemaDependency"/> class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="schema">The schema which must be validated.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.Validate(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Validates a <see cref="T:Manatee.Json.JsonValue"/> against the schema.
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/></param>
            <param name="root">The root schema serialized to a <see cref="T:Manatee.Json.JsonValue"/>.  Used internally for resolving references.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.GetJsonData">
            <summary>
            Gets the JSON data to be used as the value portion in the dependency list of the schema.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaErrorMessages">
            <summary>
            Defines tokenized error messages for schema validations.
            </summary>
            <remarks>
            Tokens are denoted using a set of double curly braces (e.g. <code>{{value}}</code>. All messages support a "value" token, which is the validated value.  Others are declared in the notes for each message.
            Properties which have no error message listed here simply forward error messages from children schemata.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Const">
            <summary>
            The error message used for the <code>const</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Contains">
            <summary>
            The error message used for the <code>contains</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Definitions">
            <summary>
            The error message used for the <code>definitions</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Enum">
            <summary>
            The error message used for the <code>enum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Format">
            <summary>
            The error message used for the <code>format</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - format
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Then">
            <summary>
            The error message used for the <code>then</code> property (only used when the <code>if</code> property is present and succeeds).
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Else">
            <summary>
            The error message used for the <code>else</code> property (only used when the <code>if</code> property is present and fails).
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Items">
            <summary>
            The error message used for the <code>items</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.ExclusiveMaximum">
            <summary>
            The error message used for the <code>exclusiveMaximum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Maximum">
            <summary>
            The error message used for the <code>maximum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.ExclusiveMinimum">
            <summary>
            The error message used for the <code>exclusiveMinimum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Minimum">
            <summary>
            The error message used for the <code>minimum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MaxItems">
            <summary>
            The error message used for the <code>maxItems</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MinItems">
            <summary>
            The error message used for the <code>minItems</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MaxLength">
            <summary>
            The error message used for the <code>maxLength</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MinLength">
            <summary>
            The error message used for the <code>minLength</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MaxProperties">
            <summary>
            The error message used for the <code>maxProperties</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MinProperties">
            <summary>
            The error message used for the <code>minProperties</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MultipleOf">
            <summary>
            The error message used for the <code>multipleOf</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - multipleOf
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Not">
            <summary>
            The error message used for the <code>not</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.OneOf">
            <summary>
            The error message used for the <code>oneOf</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Pattern">
            <summary>
            The error message used for the <code>pattern</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - pattern
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.AdditionalProperties_False">
            <summary>
            The error message used for the <code>additionalProperties</code> property when the property's value is false.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Required">
            <summary>
            The error message used for the <code>required</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Type">
            <summary>
            The error message used for the <code>type</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.UniqueItems">
            <summary>
            The error message used for the <code>uniqueItems</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaLoadException">
            <summary>
            Thrown when a schema could not be loaded.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaValidationError">
            <summary>
            Represents a single schema validation error.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationError.PropertyName">
            <summary>
            The property or property path which failed validation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationError.Message">
            <summary>
            A message indicating the failure.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationError.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationError.Equals(Manatee.Json.Schema.SchemaValidationError)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationError.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationError.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaValidationResults">
            <summary>
            Contains the results of schema validation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.Valid">
            <summary>
            Gets whether the validation was successful.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.Errors">
            <summary>
            Gets a collection of any errors which may have occurred during validation.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:Manatee.Json.Schema.SchemaValidationResults"/>.
            </summary>
            <param name="propertyName">The name of the property that failed.</param>
            <param name="message">A message explaining the error.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.#ctor(System.Collections.Generic.IEnumerable{Manatee.Json.Schema.SchemaValidationResults})">
            <summary>
            Creates an instance of <see cref="T:Manatee.Json.Schema.SchemaValidationResults"/>.
            </summary>
            <param name="aggregate">A collection of <see cref="T:Manatee.Json.Schema.SchemaValidationResults"/> to aggregate together.</param>
        </member>
        <member name="T:Manatee.Json.Schema.StringFormat">
            <summary>
            Defines various string formatting types used for StringSchema validation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.DateTime">
            <summary>
            Defines a date/time format via <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/>
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.Email">
            <summary>
            Defines an email address format.
            </summary>
            <remarks>
            From http://www.regular-expressions.info/email.html
            </remarks>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.HostName">
            <summary>
            Defines a host name format.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.Ipv4">
            <summary>
            Defines an IPV4 address format.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.Ipv6">
            <summary>
            Defines an IPV6 format.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.Regex">
            <summary>
            Defines a regular expression format.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.Uri">
            <summary>
            Defines a URI format via <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)"/>.
            </summary>
            <remarks>For draft-06 schema, only use this for absolute URIs.</remarks>
        </member>
        <member name="F:Manatee.Json.Schema.StringFormat.UriReference">
            <summary>
            Defines a URI format via <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)"/>
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.Key">
            <summary>
            A string key which specifies this string format.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.StringFormat.Validate(System.String)">
            <summary>
            Validates a value to the specified format.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if the value is valid, otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.StringFormat.GetFormat(System.String)">
            <summary>
            Gets a <see cref="T:Manatee.Json.Schema.StringFormat"/> object based on a format key.
            </summary>
            <param name="formatKey">The predefined key for the format.</param>
            <returns>A <see cref="T:Manatee.Json.Schema.StringFormat"/> object, or null if none exists for the key.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.AbstractionMap">
            <summary>
            Provides an interface to map abstract and interface types to concrete types for object instantiation during deserialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.AbstractionMap.Default">
            <summary>
            Provides a default abstraction map for new <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instances.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.#ctor">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Serialization.AbstractionMap"/> instance.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.#ctor(Manatee.Json.Serialization.AbstractionMap)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Serialization.AbstractionMap"/> instance using another as a basis.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.Map``2(Manatee.Json.Serialization.MapBaseAbstractionBehavior)">
            <summary>
            Applies a mapping from an abstraction to a concrete type.
            </summary>
            <typeparam name="TAbstract">The abstract type.</typeparam>
            <typeparam name="TConcrete">The concrete type.</typeparam>
            <param name="mappingBehavior">The mapping behavior.</param>
            <exception cref="T:Manatee.Json.Serialization.JsonTypeMapException`2">Thrown if TConcrete is an abstract class or an interface.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.MapGeneric(System.Type,System.Type,Manatee.Json.Serialization.MapBaseAbstractionBehavior)">
            <summary>
            Applies a mapping from an open generic abstraction to an open generic concrete type.
            </summary>
            <param name="tAbstract">The abstract type.</param>
            <param name="tConcrete">The concrete type.</param>
            <param name="mappingBehavior">The mapping behavior.</param>
            <exception cref="T:Manatee.Json.Serialization.JsonTypeMapException">Thrown if <paramref name="tConcrete"/> is an abstract class or an interface or if <paramref name="tConcrete"/> does not inherit from <paramref name="tAbstract"/>.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.RemoveMap``1(System.Boolean)">
            <summary>
            Removes a previously-assigned mapping.
            </summary>
            <typeparam name="TAbstract">The type to remove.</typeparam>
            <param name="removeRelated">Optionally removes mappings of base and related interface types.</param>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.GetMap(System.Type)">
            <summary>
            Retrieves the map setting for an abstraction type.
            </summary>
            <param name="type">The abstraction type.</param>
            <returns>The mapped type if a mapping exists; otherwise the abstraction type.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.CustomSerializations">
            <summary>
            Manages methods for serializing object types which do not implement <see cref="T:Manatee.Json.Serialization.IJsonSerializable"/> and cannot be automatically serialized.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.CustomSerializations.ToJsonDelegate`1">
            <summary>
            Declares the required signature for a serializer method.
            </summary>
            <typeparam name="T">The type which the method serializes.</typeparam>
            <param name="input">The object to be serialized.</param>
            <param name="serializer">The serializer to be used.</param>
            <returns>The JSON representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.CustomSerializations.FromJsonDelegate`1">
            <summary>
            Declares the required signature for a deserializer method.
            </summary>
            <typeparam name="T">The type which the method deserializes.</typeparam>
            <param name="json">The JSON representation of the object.</param>
            <param name="serializer">The serializer to be used.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:Manatee.Json.Serialization.CustomSerializations.Default">
            <summary>
            Provides a default custom serialization set for new <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instances.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.CustomSerializations.#ctor">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Serialization.CustomSerializations"/> instance.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.CustomSerializations.#ctor(Manatee.Json.Serialization.CustomSerializations)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Serialization.CustomSerializations"/> instance using another as a basis.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.CustomSerializations.RegisterType``1(Manatee.Json.Serialization.CustomSerializations.ToJsonDelegate{``0},Manatee.Json.Serialization.CustomSerializations.FromJsonDelegate{``0})">
            <summary>
            Registers an encode/decode method pair for a specific type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="toJson">The serializer method.</param>
            <param name="fromJson">The deserializer method.</param>
            <exception cref="T:Manatee.Json.Serialization.TypeRegistrationException">Thrown if either, but not both, <paramref name="toJson"/>
            or <paramref name="fromJson"/> is null.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.CustomSerializations.IsRegistered``1">
            <summary>
            Gets whether a given type has been entered into the registry.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>True if an entry exists for the type; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.CustomSerializations.IsRegistered(System.Type)">
            <summary>
            Gets whether a given type has been entered into the registry.
            </summary>
            <param name="type">The type.</param>
            <returns>True if an entry exists for the type; otherwise false.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.DateTimeSerializationFormat">
            <summary>
            Available formatting options for serializing DateTime objects.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.Iso8601">
            <summary>
            Output conforms to ISO 8601 formatting: YYYY-MM-DDThh:mm:ss.sTZD (e.g. 1997-07-16T19:20:30.45+01:00)
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.JavaConstructor">
            <summary>
            Output is a string in the format "/Date([ms])/", where [ms] is the number of milliseconds
            since January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.Milliseconds">
            <summary>
            Output is a numeric value representing the number of milliseconds since January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.Custom">
            <summary>
            Output is formatted using the <see cref="P:Manatee.Json.Serialization.JsonSerializerOptions.CustomDateTimeSerializationFormat"/> property.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.EnumSerializationFormat">
            <summary>
            Enumerates serialization formats for enumerations.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.EnumSerializationFormat.AsInteger">
            <summary>
            Instructs the serializer to convert enumeration values to their numeric counterparts.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.EnumSerializationFormat.AsName">
            <summary>
            Instructs the serializer to convert enumeration values to their string counterparts.
            </summary>
            <remarks>
            This option will use the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>'s <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> property if it is present.  If the enumeration is marked with the flags attribute, the string representation will consist of a delimited list of names, the delimiter specified by <see cref="P:Manatee.Json.Serialization.JsonSerializerOptions.FlagsEnumSeparator"/>.  Whenever a value is passed which does not have a named counterpart, the numeric value will be used.
            </remarks>
        </member>
        <member name="T:Manatee.Json.Serialization.IJsonSerializable">
            <summary>
            Provides implementers the option to set a preferred method for serialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.IJsonSerializable.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Serialization.IJsonSerializable.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.InvalidPropertyKeyBehavior">
            <summary>
            Enumeration of behavior options for the deserializer when a JSON structure is passed which
            contains invalid property keys.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.InvalidPropertyKeyBehavior.DoNothing">
            <summary>
            Deserializer ignores the invalid property keys.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.InvalidPropertyKeyBehavior.ThrowException">
            <summary>
            Deserializer will throw an exception when an invalid property key is found.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.IResolver">
            <summary>
            Defines methods required to resolved instances for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.IResolver.Resolve``1">
            <summary>
            Resolves an instance of the given type.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>An instance of the type requested.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.IResolver.Resolve(System.Type)">
            <summary>
            Resolves an instance of the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>An instance of the type requested.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonIgnoreAttribute">
            <summary>
            Applied to properties to indicate that they are not to be serialized.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonMapToAttribute">
            <summary>
            Allows the user to specify how a property is mapped during serialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonMapToAttribute.MapToKey">
            <summary>
             Specifies the key in the JSON object which maps to the property to which
             this attribute is applied.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonMapToAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance fo the <see cref="T:Manatee.Json.Serialization.JsonMapToAttribute"/> class.
            </summary>
            <param name="key">The JSON object key.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializationAbstractionMap">
            <summary>
            Provides an interface to map abstract and interface types to
            concrete types for object instantiation during deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationAbstractionMap.Map``2(Manatee.Json.Serialization.MapBaseAbstractionBehavior)">
            <summary>
            Applies a mapping from an abstraction to a concrete type.
            </summary>
            <typeparam name="TAbstract">The abstract type.</typeparam>
            <typeparam name="TConcrete">The concrete type.</typeparam>
            <param name="mappingBehavior">The mapping behavior.</param>
            <exception cref="T:Manatee.Json.Serialization.JsonTypeMapException`2">Thrown if TConcrete is an
            abstract class or an interface.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationAbstractionMap.MapGeneric(System.Type,System.Type,Manatee.Json.Serialization.MapBaseAbstractionBehavior)">
            <summary>
            Applies a mapping from an open generic abstraction to an open generic concrete type.
            </summary>
            <param name="tAbstract">The abstract type.</param>
            <param name="tConcrete">The concrete type.</param>
            <param name="mappingBehavior">The mapping behavior.</param>
            <exception cref="T:Manatee.Json.Serialization.JsonTypeMapException">Thrown if <paramref name="tConcrete"/> is an
            abstract class or an interface or if <paramref name="tConcrete"/> does not inherit
            from <paramref name="tAbstract"/>.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationAbstractionMap.RemoveMap``1(System.Boolean)">
            <summary>
            Removes a previously-assigned mapping.
            </summary>
            <typeparam name="TAbstract">The type to remove.</typeparam>
            <param name="removeRelated">Optionally removes mappings of base and related interface types.</param>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationAbstractionMap.GetMap(System.Type)">
            <summary>
            Retrieves the map setting for an abstraction type.
            </summary>
            <param name="type">The abstraction type.</param>
            <returns>The mapped type if a mapping exists; otherwise the abstraction type.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializationException">
            <summary>
            Thrown when an error occurs during serialization or deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializationTypeRegistry">
            <summary>
            Manages methods for serializing object types which do not implement <see cref="T:Manatee.Json.Serialization.IJsonSerializable"/> and
            cannot be automatically serialized.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializationTypeRegistry.ToJsonDelegate`1">
            <summary>
            Declares the required signature for a serializer method.
            </summary>
            <typeparam name="T">The type which the method serializes.</typeparam>
            <param name="input">The object to be serialized.</param>
            <param name="serializer">The serializer to be used.</param>
            <returns>The JSON representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializationTypeRegistry.FromJsonDelegate`1">
            <summary>
            Declares the required signature for a deserializer method.
            </summary>
            <typeparam name="T">The type which the method deserializes.</typeparam>
            <param name="json">The JSON representation of the object.</param>
            <param name="serializer">The serializer to be used.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationTypeRegistry.RegisterType``1(Manatee.Json.Serialization.JsonSerializationTypeRegistry.ToJsonDelegate{``0},Manatee.Json.Serialization.JsonSerializationTypeRegistry.FromJsonDelegate{``0})">
            <summary>
            Registers an encode/decode method pair for a specific type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="toJson">The serializer method.</param>
            <param name="fromJson">The deserializer method.</param>
            <exception cref="T:Manatee.Json.Serialization.TypeRegistrationException">Thrown if either, but not both, <paramref name="toJson"/>
            or <paramref name="fromJson"/> is null.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationTypeRegistry.IsRegistered``1">
            <summary>
            Gets whether a given type has been entered into the registry.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>True if an entry exists for the type; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationTypeRegistry.IsRegistered(System.Type)">
            <summary>
            Gets whether a given type has been entered into the registry.
            </summary>
            <param name="type">The type.</param>
            <returns>True if an entry exists for the type; otherwise false.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializer">
            <summary>
            Serializes and deserializes objects and types to and from JSON structures.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializer.Options">
            <summary>
            Gets or sets a set of options for this serializer.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializer.CustomSerializations">
            <summary>
            Gets or sets the set of custom serializations supported by this serializer. 
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializer.AbstractionMap">
            <summary>
            Gets or sets the abstraction map used by this serializer.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.Serialize``1(``0)">
            <summary>
            Serializes an object to a JSON structure.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="obj">The object to serialize.</param>
            <returns>The JSON representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.SerializeType``1">
            <summary>
            Serializes the public static properties of a type to a JSON structure.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
            <returns>The JSON representation of the type.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.GenerateTemplate``1">
            <summary>
            Generates a template JSON inserting default values.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.Deserialize``1(Manatee.Json.JsonValue)">
            <summary>
            Deserializes a JSON structure to an object of the appropriate type.
            </summary>
            <typeparam name="T">The type of the object that the JSON structure represents.</typeparam>
            <param name="json">The JSON representation of the object.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException">Optionally thrown during automatic
            deserialization when the JSON contains a property which is not defined by the requested
            type.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.DeserializeType``1(Manatee.Json.JsonValue)">
            <summary>
            Deserializes a JSON structure to the public static properties of a type.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="json">The JSON representation of the type.</param>
            <exception cref="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException">Optionally thrown during automatic
            deserialization when the JSON contains a property which is not defined by the requested
            type.</exception>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializerOptions">
            <summary>
            Represents a set of behavior options for the <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.JsonSerializerOptions.Default">
            <summary>
            Default options used by the serializer.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.EncodeDefaultValues">
            <summary>
            Gets and sets whether the serializer encodes default values for properties.
            </summary>
            <remarks>
            Setting to 'true' may significantly increase the size of the JSON structure.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.InvalidPropertyKeyBehavior">
            <summary>
            Gets and sets the behavior of the deserializer when a JSON structure is passed which
            contains invalid property keys.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.DateTimeSerializationFormat">
            <summary>
            Gets and sets the format for <see cref="T:System.DateTime"/> serialization using the default serializer methods.
            </summary>
            <remarks>
            If the <see cref="T:Manatee.Json.Serialization.JsonSerializationTypeRegistry"/> entry for DateTime has been changed to custom
            methods, this property will have no effect.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.CustomDateTimeSerializationFormat">
            <summary>
            Gets and sets a custom serialization format for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.EnumSerializationFormat">
            <summary>
            Gets and sets the format for enumeration serialization using the default serializer methods.
            </summary>
            <remarks>
            If an entry has been made in <see cref="T:Manatee.Json.Serialization.JsonSerializationTypeRegistry"/> for the specific type,
            this property will have no effect.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.FlagsEnumSeparator">
            <summary>
            Gets and sets a separator to be used when serializing enumerations marked with the <see cref="T:System.FlagsAttribute"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.CaseSensitiveDeserialization">
            <summary>
            Gets and sets whether the serializer considers case for properties while deserializing.
            </summary>
            <remarks>
            This only affects automatic serialization.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.TypeNameSerializationBehavior">
            <summary>
            Gets and sets whether the serializer always includes the type name while serializing.
            </summary>
            <remarks>
            This only affects automatic serialization.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.PropertySelectionStrategy">
            <summary>
            Gets and sets which properties are automatically included while serializing.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.Resolver">
            <summary>
            Gets and sets an <see cref="T:Manatee.Json.Serialization.IResolver"/> implementation for instantiating objects while deserializing.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.AutoSerializeFields">
            <summary>
            Gets and sets whether public fields should be serialized during autoserialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.SerializationNameTransform">
            <summary>
            Gets and sets a transformation function for property names during serialization.  Default is no transformation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.DeserializationNameTransform">
            <summary>
            Gets and sets a transformation function for property names during deserialization.  Default is no transformation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.OnlyExplicitProperties">
            <summary>
            Gets and sets whether the serializer will serialize only the properties defined by the
            type given as the generic parameter.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializerOptions.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> with default options.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializerOptions.#ctor(Manatee.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Creates a new instance of <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> by copying an existing
            <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> instance.
            </summary>
            <param name="options">The <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> instance to copy.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonTypeMapException">
            <summary>
             Thrown when an abstract or interface type is mapped to another abstract or interface type.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonTypeMapException`2">
            <summary>
             Thrown when an abstract or interface type is mapped to another abstract or interface type.
            </summary>
            <typeparam name="TAbstract">The type being mapped from.</typeparam>
            <typeparam name="TConcrete">The type being mapped to.</typeparam>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonTypeMapException`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.JsonTypeMapException`2"/> object.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.MapBaseAbstractionBehavior">
            <summary>
            Describes mapping behaviors for mapping abstraction types in the serializer.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.MapBaseAbstractionBehavior.None">
            <summary>
            Specifies that no additional mappings will be made.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.MapBaseAbstractionBehavior.Unmapped">
            <summary>
            Specifies that any unmapped base classes and interfaces will be mapped.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.MapBaseAbstractionBehavior.Override">
            <summary>
            Specifies that all base classes and interfaces will be mapped, overriding any existing mappings.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.PropertySelectionStrategy">
            <summary>
            Enumerates the types of properties which are automatically serialized.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.PropertySelectionStrategy.ReadWriteOnly">
            <summary>
            Indicates that read/write properties will be serialized.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.PropertySelectionStrategy.ReadOnly">
            <summary>
            Indicates that read-only properties will be serialized.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.PropertySelectionStrategy.ReadAndWrite">
            <summary>
            Indicates that both read-only and read/write properties will be serialized.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.SchemaAttribute">
            <summary>
            Indicates that a type should be validated by a JSON Schema before deserializing.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SchemaAttribute.Source">
            <summary>
            The source of the schema.  May be an absolute URI or the name of a static property defined on the type.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.SchemaAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.SchemaAttribute"/>.
            </summary>
            <param name="source">The source of the schema.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException">
            <summary>
            Optionally thrown when deserializing and the JSON structure contains property names
            which are not valid for the type requested.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.TypeDoesNotContainPropertyException.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.TypeDoesNotContainPropertyException.Json">
            <summary>
            Gets the portion of the JSON structure which contain the invalid properties.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.TypeDoesNotContainPropertyException.#ctor(System.Type,Manatee.Json.JsonValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="json">The invalid JSON structure.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.TypeInstantiationException">
            <summary>
            Thrown when a type cannot be instantiated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.TypeInstantiationException.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.TypeInstantiationException"/> class.
            </summary>
            <param name="type">The type which could not be instantiated.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.TypeNameSerializationBehavior">
            <summary>
            Enumerates serialization behaviors for saving type names.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.Auto">
            <summary>
            Serializes the type name as necessary.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.OnlyForAbstractions">
            <summary>
            Serializes the type name only for abstract and interface types.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.Always">
            <summary>
            Always serializes the type name.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.Never">
            <summary>
            Never serializes the type name.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.TypeRegistrationException">
            <summary>
            Thrown when <see cref="M:Manatee.Json.Serialization.CustomSerializations.RegisterType``1(Manatee.Json.Serialization.CustomSerializations.ToJsonDelegate{``0},Manatee.Json.Serialization.CustomSerializations.FromJsonDelegate{``0})"/>
            is passed one method and a null.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.TypeRegistrationException.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.TypeRegistrationException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Manatee.Json.Serialization.TypeRegistrationException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Manatee.Json.Transform.JsonTransformer">
            <summary>
            Performs transformations between JSON schemas.
            </summary>
        </member>
        <member name="M:Manatee.Json.Transform.JsonTransformer.Transform(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Performs transformations between JSON schemas.
            </summary>
            <param name="source">The source JSON.</param>
            <param name="template">A template defining the transformation.</param>
            <returns>The transformed JSON.</returns>
        </member>
        <member name="M:Manatee.Json.UriExtensions.GetParentUri(System.Uri)">
            <summary>
            Gets the Uri to the parent object.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of a resource, for which the parent Uri should be retrieved.</param>
            <returns>
            The parent <see cref="T:System.Uri" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">uri</exception>
            <exception cref="T:System.InvalidOperationException">Cannot get parent of root</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> has no parent, it refers to a root resource.</exception>
        </member>
        <member name="T:Manatee.Json.XmlExtensions">
            <summary>
            Contains functionality to map JSON values to XML constructs.
            </summary>
        </member>
        <member name="M:Manatee.Json.XmlExtensions.ToXElement(Manatee.Json.JsonValue,System.String)">
            <summary>
            Converts a <see cref="T:Manatee.Json.JsonValue"/> to an XElement
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/>.</param>
            <param name="key">The key to be used as a top-level element name.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representation of the <see cref="T:Manatee.Json.JsonValue"/>.</returns>
            <remarks>
            The 'key' parameter may be null only when the underlying JSON is an object which contains a single key/value pair.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="key"/> is null, empty, or whitespace and <paramref name="json"/> is not a non-empty <see cref="T:Manatee.Json.JsonObject"/>.</exception>
        </member>
        <member name="M:Manatee.Json.XmlExtensions.ToJson(System.Xml.Linq.XElement)">
            <summary>
            Converts an <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="xElement">An <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Manatee.Json.XmlExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Converts an <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="xElements">A collection of <see cref="T:System.Xml.Linq.XElement"/> objects.</param>
            <returns>A single <see cref="T:Manatee.Json.JsonValue"/> which represents the list of <see cref="T:System.Xml.Linq.XElement"/> objects.</returns>
            <exception cref="T:System.Xml.XmlException">Thrown if an error occurs while attempting to convert an array of elements.</exception>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
